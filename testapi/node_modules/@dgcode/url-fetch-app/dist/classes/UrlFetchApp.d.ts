import { HTTPResponse } from './HTTPResponse';
/**
 * Fetch resources and communicate with other hosts over the Internet.
 */
export declare class UrlFetchApp {
    /**
     * Makes a request to fetch a URL using optional advanced parameters.
     *
     * @param {string} url the URL to fetch
     * @param {object} params optional JavaScript object specifying advanced parameters as defined
     * below
     * @returns {HTTPResponse} the http response data
     * @see https://developers.google.com/apps-script/reference/url-fetch/http-response.html
     */
    fetch(url: string, params?: IFetchParams): HTTPResponse;
    /**
     * Makes multiple requests to fetch multiple URLs using optional advanced parameters.
     *
     * @param {object[]} requests array of either URLs, or JavaScript objects specifying requests as
     * defined below
     * @returns {HTTPResponse[]} HTTPResponse[] â€” an array of http response data from each input
     * request
     * @see https://developers.google.com/apps-script/reference/url-fetch/http-response.html
     */
    fetchAll(requests: (string | IFetchParams)[]): HTTPResponse[];
    /**
     * Returns the request that would be made if the operation was invoked.
     *
     * @param {string} url the URL to look up
     * @returns {Object} a map of Field Name to Value. The map has at least the following keys: url,
     * method,
     */
    getRequest(url: string): IRequestMock;
    /**
     * Returns the request that would be made if the operation were invoked.
     *
     * @param {string} url the url to look up
     * @param {object} params optional JavaScript object specifying advanced parameters as defined
     * below
     * @returns {Object} a map of Field Name to Value. The map has at least the following keys: url,
     * method, contentType, payload, headers.
     */
    getRequest(url: string, params: IGetRequestParams): IRequestMock;
}
declare type IMap = {
    [key: string]: string;
};
/**
 * Parameters that can be passed as `UrlFetchApp.fetch(url, params)`.
 *
 * @export
 * @interface IFetchParams
 */
export interface IFetchParams {
    /**
     * The content type (defaults to `'application/x-www-form-urlencoded'`).
     * Another example of content type is `'application/xml; charset=utf-8'`.
     *
     * @type {string}
     * @memberof IFetchParams
     */
    contentType?: string;
    /**
     * A JavaScript key/value map of HTTP headers for the request
     *
     * @type {IMap}
     * @memberof IFetchParams
     */
    headers?: IMap;
    /**
     * The HTTP method for the request: get, delete, patch, post, or put.
     * The default is get.
     *
     * @type {string}
     * @memberof IFetchParams
     */
    method?: string;
    /**
     * The payload (that is, the POST body) for the request. Certain HTTP methods
     * (for example, GET) do not accept a payload. It can be a string, a byte array,
     * a blob, or a JavaScript object. A JavaScript object is interpreted as a map
     * of form field names to values, where the values can be either strings or blobs.
     *
     * @type {string}
     * @memberof IFetchParams
     */
    payload?: string;
    /**
     * Deprecated. This instructs fetch to resolve the specified URL within the
     * intranet linked to your domain through (deprecated) SDC.
     *
     * @deprecated
     * @type {boolean}
     * @memberof IFetchParams
     */
    useIntranet?: boolean;
    /**
     * If this is set to false, the fetch will ignore any invalid certificates for
     * HTTPS requests. The default is true.
     *
     * @type {boolean}
     * @memberof IFetchParams
     */
    validateHttpsCertificates?: boolean;
    /**
     * If this is set to false, the fetch not automatically follow HTTP redirects;
     * it will return the original HTTP response. The default is true.
     *
     * @type {boolean}
     * @memberof IFetchParams
     */
    followRedirects?: boolean;
    /**
     * If this is set to true, the fetch will not throw an exception if the response
     * code indicates failure, and will instead return the HTTPResponse (default: false).
     *
     * @type {boolean}
     * @memberof IFetchParams
     */
    muteHttpExceptions?: boolean;
    /**
     * If this is set to false, reserved characters in the URL will not be escaped (default: true)
     *
     * @type {boolean}
     * @memberof IFetchParams
     */
    escaping?: boolean;
}
export interface IGetRequestParams extends IFetchParams {
}
/**
 * Type definition; object returned by `UrlFetchApp.getRequest(...)`.
 *
 * @export
 * @interface IRequestMock
 */
export interface IRequestMock {
    url: string;
    method: string;
    contentType: string;
    payload: string;
    headers: IMap;
}
export {};
