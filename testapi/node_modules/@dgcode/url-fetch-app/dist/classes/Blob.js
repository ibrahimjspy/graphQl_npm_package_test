"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A data interchange object for Apps Script services.
 */
class Blob {
    /**
     * Returns a copy of this blob.
     *
     * @returns {Blob} The new copy.
     */
    copyBlob() {
        const blob = null;
        return blob;
    }
    /**
     * Return the data inside this object as a blob converted to the specified content type.
     *
     * @param {string} contentType The MIME type to convert to. For most blobs, `'application/pdf'`
     * is the only valid option. For images in BMP, GIF, JPEG, or PNG format, any of `'image/bmp'`,
     * `'image/gif'`, `'image/jpeg'`, or `'image/png'` are also valid.
     * @returns {Blob} The data as a blob.
     */
    getAs(contentType) {
        const blob = null;
        return blob;
    }
    /**
     * Gets the data stored in this blob.
     *
     * @returns Byte[] — The stored bytes.
     */
    getBytes() {
        const string = null;
        return string;
    }
    /**
     * Gets the content type of the bytes in this blob.
     *
     * @returns {String} The content type of this data, if known, or null.
     */
    getContentType() {
        const finalString = null;
        return finalString;
    }
    // getDataAsString(...) implementation
    getDataAsString(...args) {
        const res = null;
        return res;
    }
    /**
     * Gets the name of this blob.
     *
     * @returns {String} The name of this data, if known, or null.
     */
    getName() {
        const finalString = null;
        return finalString;
    }
    /**
     * Returns whether this blob is a G Suite file (Sheets, Docs, etc.).
     *
     * @returns {Boolean} true if this blob is a G Suite file; false if not.
     */
    isGoogleType() {
        const finalBoolean = null;
        return finalBoolean;
    }
    /**
     * Sets the data stored in this blob.
     *
     * @param {string[]} data The new data.
     * @returns {Blob} This blob, for chaining.
     */
    setBytes(data) {
        const blob = null;
        return blob;
    }
    /**
     * Sets the content type of the bytes in this blob.
     *
     * @param {string} contentType The new contentType.
     * @returns {Blob} This blob, for chaining.
     */
    setContentType(contentType) {
        const blob = null;
        return blob;
    }
    /**
     * Sets the content type of the bytes in this blob based on the file extension.
     *
     * @returns {Blob} This blob, for chaining.
     */
    setContentTypeFromExtension() {
        const blob = null;
        return blob;
    }
    // setDataFromString(...) implementation
    setDataFromString(...args) {
        const res = null;
        return res;
    }
    /**
     * Sets the name of this blob.
     *
     * @param {string} name The new name.
     * @returns {Blob} This blob, for chaining.
     */
    setName(name) {
        const blob = null;
        return blob;
    }
    /**
     * Gets all the blobs that are contained within this (possibly composite) blob.
     *
     * @returns {Blob[]} Blob[] — The blobs contained within the blob.
     */
    getAllBlobs() {
        const blob = null;
        return blob;
    }
}
exports.Blob = Blob;
//# sourceMappingURL=Blob.js.map