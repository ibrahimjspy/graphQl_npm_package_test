"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Exports -----------------------------------
/**
 * This class allows users to access specific information on HTTP responses.
 */
class HTTPResponse {
    /**
     * Returns an attribute/value map of headers for the HTTP response, with headers that have
     * multiple values returned as arrays.
     *
     * @returns {Object} a JavaScript key/value map of HTTP headers
     */
    getAllHeaders() {
        const finalObject = null;
        return finalObject;
    }
    /**
     * Return the data inside this object as a blob converted to the specified content type.
     *
     * @param {string} contentType The MIME type to convert to. For most blobs, `'application/pdf'`
     * is the only valid option. For images in BMP, GIF, JPEG, or PNG format, any of `'image/bmp'`,
     * `'image/gif'`, `'image/jpeg'`, or `'image/png'` are also valid.
     * @returns {Blob} The data as a blob.
     * @see https://developers.google.com/apps-script/reference/base/blob.html
     */
    getAs(contentType) {
        const blob = null;
        return blob;
    }
    /**
     * Return the data inside this object as a blob.
     *
     * @returns {Blob} The data as a blob.
     * @see https://developers.google.com/apps-script/reference/base/blob.html
     */
    getBlob() {
        const blob = null;
        return blob;
    }
    /**
     * Gets the raw binary content of an HTTP response.
     *
     * @returns Byte[] â€” the content as a raw binary array
     */
    getContent() {
        const string = null;
        return string;
    }
    // getContentText(...) implementation
    getContentText(...args) {
        const res = null;
        return res;
    }
    /**
     * Returns an attribute/value map of headers for the HTTP response.
     *
     * @returns {Object} a JavaScript key/value map of HTTP headers
     */
    getHeaders() {
        const finalObject = null;
        return finalObject;
    }
    /**
     * Get the HTTP status code (200 for OK, etc.) of an HTTP response.
     *
     * @returns {Integer} HTTP response code (e.g. 200 for OK)
     */
    getResponseCode() {
        const finalNumber = null;
        return finalNumber;
    }
}
exports.HTTPResponse = HTTPResponse;
//# sourceMappingURL=HTTPResponse.js.map